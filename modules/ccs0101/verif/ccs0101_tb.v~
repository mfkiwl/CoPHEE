`timescale 1 ns/1 ps

module ccs0101_tb (
);

//---------------------------------
//Local param reg/wire declaration
//---------------------------------

localparam  CLK_PERIOD   = 4.167;   //24 Mhz
localparam  UART_BAUD    = 41.67; //9600 bps

localparam  NUM_PADS     = 11;
localparam  PAD_CTL_W    = 4;

wire [NUM_PADS-1  :0] pad;
wire [NUM_PADS-1  :0] pad_in;
wire [NUM_PADS-1  :0] pad_out;
wire [PAD_CTL_W-1 :0] pad_ctl[NUM_PADS-1 :0];

reg     CLK; 
reg     nPORESET; 
reg     nRESET; 

reg       UART_CLK; 
reg [9:0] tx_reg = 10'h3FF; 
reg [7:0] rx_reg = 8'h00; 
reg [2047:0] uartm_rx_tb_data = 2048'h0; 
wire uartm_rx_data;
wire cleq_host_irq;

integer no_of_clocks; 

reg [31:0] mem [0:16383];

//Address params
`include "./ccs0101_header.v"

//Tasks
`include "./ccs0101_tasks.v"


//2147483648
//wire [1023:0] N     = 1024'd8034992000023210111111111111111199999999999999999999999999999999999999999999999999999999999999;
wire [1023:0]  N     = 1024'd5;
wire [2047:0]  nsq   = N*N;
wire [2047:0]  arga  = N*N-10'd9;
wire [2047:0]  argb  = N*N-10'd7;
wire [2047:0]  fkf   = N*N-10'd5;
wire [1023:0]  rand0 = N-10'd2;
wire [1023:0]  rand1 = N-10'd3;
wire [11:0]    log2ofn  = $clog2(N);
wire [11:0]    log2ofn2 = $clog2(N*N);
wire [11:0]    log2ofncheck = $clog2(5);
   
//Defines
`define ARM_UD_MODEL;

//initial $readmemh("./hex/cm0.hex", mem);

//------------------------------
//Clock and Reset generation
//------------------------------

initial begin
  CLK      = 1'b0; 
  UART_CLK = 1'b0; 
end

always begin
  #(CLK_PERIOD/2) CLK = ~CLK; 
end

always begin
  #(UART_BAUD/2) UART_CLK = ~UART_CLK; 
end


initial begin

#0 nPORESET  = 1'b1;
   nRESET    = 1'b1;
  repeat (10) begin
    @(posedge CLK);
  end
force ccs0101_tb.u_dut_inst.u_chip_core_inst.u_gpcfg_inst.uartm_baud_ctl_reg = 32'h9;

   nPORESET  = 1'b0;
   nRESET    = 1'b0;
//release ccs0001_tb.u_dut_inst.u_chip_core_inst.u_sram_wrap_inst.genblk1[0].u_sram_inst.mem[0:16383];

  repeat (20) begin
    @(posedge CLK);
  end

  nPORESET = 1'b1;
  nRESET   = 1'b1;

  repeat (25) begin
    @(posedge UART_CLK);
  end

`include "./hex/test.hex"

$display($time, " << Value of N           %d", N);
$display($time, " << Value of NSQ         %d", nsq);
$display($time, " << Value of arga        %d", arga);
$display($time, " << Value of argb        %d", argb);
$display($time, " << Value of fkf         %d", fkf);
$display($time, " << Value of rand0       %d", rand0);
$display($time, " << Value of rand1       %d", rand1);
$display($time, " << Value of log2ofn     %d", log2ofn);
$display($time, " << Value of uartm_rx_tb_data     %d", uartm_rx_tb_data);
uartm_modexp (.arga (arga),.argb (2048'h2));
$display($time, " << Value of uartm_rx_tb_data     %d", uartm_rx_tb_data);
uartm_modinv (.arga (arga),.argb (argb));
$display($time, " << Value of uartm_rx_tb_data     %d", uartm_rx_tb_data);

end



//------------------------------
//DUT
//------------------------------
ccs0101 u_dut_inst 
  (
  .pad  (pad),
  .VDD  (1'b1),
  .DVDD (1'b1),
  .VSS  (1'b0),
  .DVSS (1'b0)
  );

//------------------------------
//Pad to functionality mapping
//------------------------------
//pad0  nPORESET
//pad1  nRESET
//pad2  CLK
//pad3  UARTM_TX
//pad4  UARTM_RX
//pad5  UARTS_TX
//pad6  UARTS_RX
//pad7  GPIO0
//pad8  GPIO1
//pad9  GPIO2
//pad10 GPIO3
//------------------------------

assign pad_in[0]  = nPORESET;
assign pad_ctl[0] = 4'h3;

assign pad_in[1]  = nRESET;
assign pad_ctl[1] = 4'h3;

assign pad_in[2]  = CLK;
assign pad_ctl[2] = 4'h3;


wire pad_ctl_3;
wire pad_ctl_4;
wire pad_ctl_5;
wire pad_ctl_6;
wire pad_ctl_7;
wire pad_ctl_8;
wire pad_ctl_9;
wire pad_ctl_10;

initial begin
  force ccs0101_tb.pad_ctl_3  = ccs0101_tb.u_dut_inst.u_padring_inst.pad_ctl[3][0];
  force ccs0101_tb.pad_ctl_4  = ccs0101_tb.u_dut_inst.u_padring_inst.pad_ctl[4][0];
  force ccs0101_tb.pad_ctl_5  = ccs0101_tb.u_dut_inst.u_padring_inst.pad_ctl[5][0];
  force ccs0101_tb.pad_ctl_6  = ccs0101_tb.u_dut_inst.u_padring_inst.pad_ctl[6][0];
  force ccs0101_tb.pad_ctl_7  = ccs0101_tb.u_dut_inst.u_padring_inst.pad_ctl[7][0];
  force ccs0101_tb.pad_ctl_8  = ccs0101_tb.u_dut_inst.u_padring_inst.pad_ctl[8][0];
  force ccs0101_tb.pad_ctl_9  = ccs0101_tb.u_dut_inst.u_padring_inst.pad_ctl[9][0];
  force ccs0101_tb.pad_ctl_10 = ccs0101_tb.u_dut_inst.u_padring_inst.pad_ctl[10][0];
end

assign pad_in[3]  = 1'b0;
assign pad_ctl[3] = {3'b001,pad_ctl_3};
assign uartm_rx_data = pad_out[3];

assign pad_in[4]  = tx_reg[0];
assign pad_ctl[4] = {3'b001,pad_ctl_4};

assign pad_in[5]  = 1'b0;
assign pad_ctl[5] = {3'b001,pad_ctl_5};

assign pad_in[6]  = 1'b1;
assign pad_ctl[6] = {3'b001,pad_ctl_6};

assign pad_in[7]  = 1'b0;
assign pad_ctl[7] = {3'b001,pad_ctl_7};

assign pad_in[8]  = 1'b0;
assign pad_ctl[8] = {3'b001,pad_ctl_8};

assign pad_in[9]  = 1'b0;
assign pad_ctl[9] = {3'b001,pad_ctl_9};
assign cleq_host_irq = pad_out[9];

assign pad_in[10]  = 1'b0;
assign pad_ctl[10] = {3'b001,pad_ctl_10};

padring_tb #(
  .NUM_PADS  (NUM_PADS),
  .PAD_CTL_W (PAD_CTL_W) )
  u_padring_tb_inst (
  .pad       (pad),
  .pad_in    (pad_in),
  .pad_out   (pad_out),
  .pad_ctl   (pad_ctl)
);

//------------------------------
//Track number of clocks
//------------------------------
initial begin
  no_of_clocks = 0; 
end
always@(posedge CLK)  begin
  no_of_clocks = no_of_clocks +1 ; 
  //$display($time, " << Number of Clocks value         %d", no_of_clocks);
  //$display($time, " << htrans_m[0] value              %b", ccs0001_tb.u_dut_inst.u_chip_core_inst.u_ahb_ic_inst.htrans_m[0][1]);
  //$display($time, " << vlaid_trans_s_by_m[s][0] value %b", ccs0001_tb.u_dut_inst.u_chip_core_inst.u_ahb_ic_inst.vlaid_trans_s_by_m[0][0]);
  //$display($time, " << vlaid_trans_s_by_m[s][1] value %b", ccs0001_tb.u_dut_inst.u_chip_core_inst.u_ahb_ic_inst.vlaid_trans_s_by_m[1][0]);
  //$display($time, " << SLAVE_BASE[0] value            %h", ccs0001_tb.u_dut_inst.u_chip_core_inst.u_ahb_ic_inst.SLAVE_BASE[0][31:16]);
  //$display($time, " << SLAVE_BASE[1] value            %h", ccs0001_tb.u_dut_inst.u_chip_core_inst.u_ahb_ic_inst.SLAVE_BASE[1][31:16]);
  //$display($time, " << haddr_m[0]  value              %h", ccs0001_tb.u_dut_inst.u_chip_core_inst.u_ahb_ic_inst.haddr_m[0][31:16]);
  //$display($time, " << memory dump              %h", ccs0001_tb.u_dut_inst.u_chip_core_inst.u_sram_wrap_inst.u_sram_inst.mem[0]);
end

endmodule


